#include <iostream>
#include <vector>
#include <string>

static constexpr char flag[] = "54c6037b4f73fce9a8304862fca9c2f6d92e9e38c9461ba829922546ed8a00545d66a702d07d8b19";
#define DEBUG
#ifdef DEBUG
#define LOG(step, x) std::cout << step << ": " << x << std::endl
#else
#define LOG(step, x)
#endif


#ifdef DEBUG
template <typename T>
std::string Hexdump(std::vector<T>& vec) {
    std::string ret;
    for (auto &i : vec) {
        for (int j = 0; j < sizeof(T); j++) {
            ret += "0123456789abcdef"[(i >> (8 * j + 4)) & 0xf];
            ret += "0123456789abcdef"[(i >> (8 * j)) & 0xf];
        }
        ret += " ";
    }
    return ret;
}

std::string Hexdump(std::string& s) {
    std::string ret;
    for (auto &i : s) {
        ret += "0123456789abcdef"[(i >> 4) & 0xf];
        ret += "0123456789abcdef"[i & 0xf];
        ret += " ";
    }
    return ret;
}
#endif


static constexpr uint8_t Sbox[256] = {
        //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

#ifdef DEBUG
static constexpr uint8_t RSbox[256] = {
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
#endif

class Cipher {
public:
    virtual std::string encrypt(std::string) = 0;
#ifdef DEBUG
    virtual std::string decrypt(std::string) = 0;
#endif
    virtual ~Cipher() = default;

};

class CaesarCipher : public Cipher {
public:
    std::string encrypt(std::string) override;
#ifdef DEBUG
    std::string decrypt(std::string) override;
#endif
};

std::string CaesarCipher::encrypt(std::string s) {
    // caesar cipher encrypt
    for (auto &c : s) {
        if (c >= 'a' && c <= 'z') {
            c = (c - 'a' + 3) % 26 + 'a';
        } else if (c >= 'A' && c <= 'Z') {
            c = (c - 'A' + 3) % 26 + 'A';
        }
    }
    return s;
}

#ifdef DEBUG
std::string CaesarCipher::decrypt(std::string s) {
    // caesar cipher decrypt
    for (auto &c : s) {
        if (c >= 'a' && c <= 'z') {
            c = (c - 'a' - 3 + 26) % 26 + 'a';
        } else if (c >= 'A' && c <= 'Z') {
            c = (c - 'A' - 3 + 26) % 26 + 'A';
        }
    }
    return s;
}
#endif

class TeaCipher : public CaesarCipher {
public:
    explicit TeaCipher(std::vector<uint32_t> key) : key_(key) {}
    std::string encrypt(std::string) override;
#ifdef DEBUG
    std::string decrypt(std::string) override;
#endif

private:
    std::vector<uint32_t> key_;
    static constexpr uint32_t delta = 0xdeadbeef;

    static std::vector<uint32_t> s2uint32(std::string);
    static std::vector<uint8_t> uint322u8(std::vector<uint32_t>);
#ifdef DEBUG
    static std::vector<uint32_t> u8uint32(std::vector<uint8_t>);
#endif
};


std::vector<uint32_t> TeaCipher::s2uint32(std::string s) {
    std::vector<uint32_t> res;
    for (int i = 0; i < s.size(); i += 4) {
        uint32_t tmp = 0;
        for (int j = 0; j < 4; ++j) {
            tmp = tmp << 8 | s[i + j];

        }
        res.push_back(tmp);
    }
    return res;
}

#ifdef DEBUG
std::vector<uint32_t> TeaCipher::u8uint32(std::vector<uint8_t> v) {
    std::vector<uint32_t> res;
    for (int i = 0; i < v.size(); i += 4) {
        uint32_t tmp = 0;
        for (int j = 0; j < 4; ++j) {
            tmp = v[i + j] << (8 * j) | tmp;
        }
        res.push_back(tmp);
    }
    return res;
}
#endif


std::vector<uint8_t> TeaCipher::uint322u8(std::vector<uint32_t> v) {
    std::vector<uint8_t> res;
    for (auto &i : v) {
        for (int j = 0; j < 4; ++j) {
            res.push_back(i & 0xff);
            i >>= 8;
        }
    }
    return res;
}

std::string TeaCipher::encrypt(std::string s) {
    std::vector<uint32_t> res;

    // raw string
    LOG(1, s);
    // caesar cipher
    std::string skr = CaesarCipher::encrypt(std::move(s));
    LOG(2, skr);
    // uint8_t -> uint32_t
    res = s2uint32(skr);
    LOG(3, Hexdump(res));
    if (res.size() % 2 == 1) {
        res.push_back(0);
    }
    // tea encrypt
    for (int i = 0; i < res.size(); i += 2) {
        uint32_t v0 = res[i], v1 = res[i + 1], sum = 0;
        for (int j = 0; j < 32; ++j) {
            sum += delta;
            v0 += ((v1 << 4) + key_[0]) ^ (v1 + sum) ^ ((v1 >> 5) + key_[1]);
            v1 += ((v0 << 4) + key_[2]) ^ (v0 + sum) ^ ((v0 >> 5) + key_[3]);
        }
        res[i] = v0;
        res[i + 1] = v1;

    }
    LOG(4, Hexdump(res));
    // uint32_t -> uint8_t
    auto ans = uint322u8(res);
    LOG(5, Hexdump(ans));
    // sbox
    for (auto &c : ans) {
        c = Sbox[c];
    }
    LOG(6, Hexdump(ans));
    // hex
    std::string ret;
    for (auto &i : ans) {
        ret += "0123456789abcdef"[i >> 4];
        ret += "0123456789abcdef"[i & 0xf];
    }
    return ret;
}
#ifdef DEBUG
std::string TeaCipher::decrypt(std::string s) {
    std::vector<uint8_t> ans;

    // hex -> uint8_t
    for (int i = 0; i < s.size(); i += 2) {
        uint8_t tmp = 0;
        for (int j = 0; j < 2; ++j) {
            tmp = tmp << 4 | (s[i + j] >= 'a' ? s[i + j] - 'a' + 10 : s[i + j] - '0');
        }
        ans.push_back(tmp);
    }
    LOG(1, Hexdump(ans));
    // sbox
    for (auto &c : ans) {
        c = RSbox[c];
    }
    LOG(2, Hexdump(ans));
    // uint8_t -> uint32_t
    auto res = u8uint32(ans);
    LOG(3, Hexdump(res));
    // decrypt
    for (int i = 0; i < res.size(); i += 2) {
        uint32_t v0 = res[i], v1 = res[i + 1], sum = delta*32;
        for (int j = 0; j < 32; ++j) {
            v1 -= ((v0 << 4) + key_[2]) ^ (v0 + sum) ^ ((v0 >> 5) + key_[3]);
            v0 -= ((v1 << 4) + key_[0]) ^ (v1 + sum) ^ ((v1 >> 5) + key_[1]);
            sum -= delta;
        }
        res[i] = v0;
        res[i + 1] = v1;
    }

    // uint32_t -> string
    std::string ret;
    for (auto &i : res) {
        for (int j = 0; j < 4; ++j) {
            ret += i >> (8 * (3-j)) & 0xff;
        }
    }
    LOG(4, Hexdump(ret));
    // caesar cipher
    ret = CaesarCipher::decrypt(ret);
    LOG(5, ret);
    return ret;
}
#endif




int main() {
    // YPCTF{329149a3d9cbb4b8b40fd0da4e837533}
    std::string inp;
    std::cout << "Please input the flag: ";
    std::cin >> inp;

    TeaCipher teaCipher({0xdeadbeef, 0xdeadbeef, 0xdeadbeef, 0xdeadbeef});
    auto ans = teaCipher.encrypt(inp);
    if (ans == flag) {
        std::cout << "Correct!" << std::endl;
    } else {
        std::cout << "Wrong!" << std::endl;
    }

#ifdef DEBUG
    constexpr char flag[] = "54c6037b4f73fce9a8304862fca9c2f6d92e9e38c9461ba829922546ed8a00545d66a702d07d8b19";
//
    std::cout << teaCipher.decrypt(flag) << std::endl;
#endif
    return 0;
}
